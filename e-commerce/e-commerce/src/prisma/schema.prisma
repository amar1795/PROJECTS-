generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//  authentication models
enum UserRole {
  ADMIN
  USER
}

// @db.ObjectId is optional as the prisma client will automatically convert the id to ObjectId anyways 

model User {
  id                    String                 @id @default(uuid()) @map("_id")  @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  rating     Rating[]   @relation("RatingToUser") // Relation to Rating model
  Review     Review[]   @relation("ReviewToUser") // Relation to Review model
  // stores    Store[] @relation("StoreToUser") 
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

// a user can have multiple accounts (e.g., Google, Facebook,credentials etc.)
model Account {
  id                String  @id @default(uuid()) @map("_id")  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid()) @map("_id")  @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid()) @map("_id")  @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid()) @map("_id")  @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(uuid()) @map("_id")  @db.ObjectId

  userId String  @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

//  authentication models


model Poster {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  PosterId  String    @db.ObjectId // Foreign Key to Poster
  Poster    Poster?   @relation(fields: [PosterId], references: [id])
  name      String
  products  Product[] @relation("CategoryToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([PosterId])
}

model Product {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  categoryId String      @db.ObjectId // Foreign Key to Category
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      Float
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  brandId    String      @db.ObjectId // Foreign Key to Brand
  brand      Brand       @relation("BrandToProduct", fields: [brandId], references: [id])
  sizeId     String      @db.ObjectId // Foreign Key to Size
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String      @db.ObjectId // Foreign Key to Color
  color      Color       @relation(fields: [colorId], references: [id])
  review     Review[]    @relation("ReviewToProduct") // Relation to Review model
  rating     Rating[]    @relation("RatingToProduct") // Relation to Rating model
  images     Image[]
  // Relation to Image model
  discount   Int?
  orderItems OrderItem[] // Relation to Order model
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
  @@index([brandId])
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId // Foreign Key to Product
  product   Product  @relation("RatingToProduct", fields: [productId], references: [id])
  rating    Int
  comment   String
  userId    String  @db.ObjectId // Foreign Key to User  
  user      User    @relation("RatingToUser",fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])

}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId // Foreign Key to Product
  product   Product  @relation("ReviewToProduct", fields: [productId], references: [id])
  rating    Int
  comment   String
  userId    String  @db.ObjectId // Foreign Key to User  
  user      User    @relation("ReviewToUser",fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])

}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  Product[] @relation("BrandToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Size {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  values    String[] 
  products  Product[] // Relation to Product model
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

}


model Color {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  orderItems     OrderItem[] // Relation to OrderItem model
  isPaid         Boolean          @default(false)
  deliveryStatus DeliveryStatus[] @relation("deliverystatustoOrder")
  phone          String           @default("")
  address        String           @default("")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

}

model DeliveryStatus {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation("deliverystatustoOrder", fields: [orderId], references: [id])
  status    String // Status of the delivery (e.g., "Order Placed", "Shipped", etc.)
  updatedAt DateTime @updatedAt

  @@index([orderId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
