generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String  @id @default(uuid()) @map("_id")
  name      String
  email     String  @unique
  password  String
  stores    Store[] @relation("StoreToUser") 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Store {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  userId   String
  user     User   @relation("StoreToUser",fields: [userId], references: [id])
  Posters      Poster[] @relation("StoreToPoster")
  categories      Category[] @relation("StoreToCategory")
  products        Product[]  @relation("StoreToProduct")
  sizes           Size[]     @relation("StoreToSize")
  colors          Color[]     @relation("StoreToColor")
  orders          Order[]     @relation("StoreToOrder")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
    @@index([userId])

}

model Poster {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String @db.ObjectId
  store       Store @relation("StoreToPoster", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  storeId         String @db.ObjectId      // Foreign Key to Store
  store           Store  @relation("StoreToCategory", fields: [storeId], references: [id])
  PosterId     String @db.ObjectId      // Foreign Key to Poster
  Poster       Poster? @relation(fields: [PosterId], references: [id])
  name            String
  products        Product[]   @relation("CategoryToProduct")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([storeId])
  @@index([PosterId])
}


model Product {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String @db.ObjectId    // Foreign Key to Store
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String @db.ObjectId    // Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Float
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  brandId         String @db.ObjectId    // Foreign Key to Brand
  brand           Brand     @relation("BrandToProduct", fields: [brandId], references: [id])
  sizeId      String @db.ObjectId    // Foreign Key to Size
  size        Size      @relation(fields: [sizeId], references: [id])
  colorId     String @db.ObjectId    // Foreign Key to Color
  color       Color     @relation(fields: [colorId], references: [id])
  review     Review[]  @relation("ReviewToProduct")// Relation to Review model
    rating     Rating[]  @relation("RatingToProduct")// Relation to Rating model
  images      Image[]
    // Relation to Image model
    discount    Int?
  orderItems  OrderItem[]   // Relation to Order model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
  @@index([brandId])
}

model Rating {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    productId  String   @db.ObjectId  // Foreign Key to Product
    product    Product  @relation("RatingToProduct", fields: [productId], references: [id])
    rating     Int
    comment    String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([productId])
}

model Review {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    productId  String   @db.ObjectId  // Foreign Key to Product
    product    Product  @relation("ReviewToProduct",fields: [productId], references: [id])
    rating     Int
    comment    String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([productId])
}

model Brand {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    products  Product[] @relation("BrandToProduct")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}


model Order {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String @db.ObjectId    // Foreign Key to Store
  store       Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  deliveryStatus  DeliveryStatus[] @relation("deliverystatustoOrder")
  phone      String    @default("")
  address    String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model DeliveryStatus {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String @db.ObjectId
  order       Order      @relation("deliverystatustoOrder",fields: [orderId], references: [id])
  status      String     // Status of the delivery (e.g., "Order Placed", "Shipped", etc.)
  updatedAt   DateTime   @updatedAt
    
  @@index([orderId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String @db.ObjectId  // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Size {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String @db.ObjectId    // Foreign Key to Store
  store       Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name        String
  value        SizeValue[] @relation("SizevalueToSize")
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model SizeValue {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String
sizeId    String @db.ObjectId
size      Size       @relation("SizevalueToSize",fields: [sizeId], references: [id])
createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@index([sizeId])
}

model Color {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String @db.ObjectId   // Foreign Key to Store
  store       Store    @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  productId   String @db.ObjectId   // Foreign Key to Product
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}
