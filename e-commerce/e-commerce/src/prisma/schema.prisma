generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//  authentication models
enum UserRole {
  ADMIN
  USER
}

// @db.ObjectId is optional as the prisma client will automatically convert the id to ObjectId anyways 

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  orders                Order[]                @relation("UsertoOrder") // Relation to Order model
  cart                  Cart[]                 @relation("UsertoCart") // Relation to Cart model
  rating                Rating[]               @relation("RatingToUser") // Relation to Rating model
  saveForLaterItems     SaveForLater[] // Relation to SaveForLater model
  wishlistItems         Wishlist[] // Relation to Wishlist model
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// a user can have multiple accounts (e.g., Google, Facebook,credentials etc.)
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

//  authentication models

model Poster {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  PosterId      String     @db.ObjectId // Foreign Key to Poster
  Poster        Poster?    @relation(fields: [PosterId], references: [id])
  name          String
  products      Product[]  @relation("CategoryToProduct")
  parentId      String?    @db.ObjectId // Reference to the parent category's ID (if this category is a subcategory)
  parent        Category?  @relation("CategoryParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Self-referencing relation to the parent category
  subcategories Category[] @relation("CategoryParent")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Index for the parentId to optimize queries
  @@index([parentId])
  @@index([PosterId])
}

// product models and product related models

model Product {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  price              Float
  brandId            String           @db.ObjectId // Foreign Key to Brand
  brand              Brand            @relation("BrandToProduct", fields: [brandId], references: [id])
  discount           Int?
  discountedPrice    Float? //to be calcaualted on the frontend and not hardcoded in the backend or a the time of adding on the backend calculate it at the backend 
  productColors      ProductColor[] // Relation to the ProductColor join model
  ratings            Rating[]         @relation("RatingToProduct") // Relation to Rating model
  images             Image[] // Relation to Image model
  ProductDescription String
  orderItems         OrderItem[] // Relation to Order model
  cartItems          CartItem[]       @relation("ProductToCart") // Relation to CartItem model
  size               ProductSize[] // Relation to ProductSize model`
  productVariants    ProductVariant[] // Relation to ProductVariant model
  saveForLater SaveForLater[] // Relation to SaveForLater model
  wishlists    Wishlist[] // Relation to Wishlist model
  categoryId   String         @db.ObjectId
  category     Category       @relation("CategoryToProduct", fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([categoryId])
  @@index([brandId])
}

model Color {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  value         String
  productColors ProductColor[] // Relation to the ProductColor join model
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ProductColor {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  productId      String           @db.ObjectId
  product        Product          @relation(fields: [productId], references: [id])
  colorId        String           @db.ObjectId
  color          Color            @relation(fields: [colorId], references: [id])
  ProductVariant ProductVariant[]

  @@unique([productId, colorId], name: "unique_product_color")

}

model Size {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  ProductSize[]
  values    String
  category  String // For example, "clothing" or "shoes"
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model ProductSize {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  productId      String           @db.ObjectId
  product        Product          @relation(fields: [productId], references: [id])
  sizeId         String           @db.ObjectId
  size           Size             @relation(fields: [sizeId], references: [id])
  ProductVariant ProductVariant[]
  @@unique([productId, sizeId], name: "unique_product_size")


}

model ProductVariant {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  productId String       @db.ObjectId
  product   Product      @relation(fields: [productId], references: [id])
  colorId   String       @db.ObjectId // Foreign Key to ProductColor
  color     ProductColor @relation(fields: [colorId], references: [id])
  sizeId    String       @db.ObjectId // Foreign Key to ProductSize
  size      ProductSize  @relation(fields: [sizeId], references: [id])
  stock     Int // Stock quantity for this specific variant
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([productId, colorId, sizeId], name: "product_variant_idx")
}

// rating and reviews models

model Rating {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  productId String        @db.ObjectId // Foreign Key to Product
  product   Product       @relation("RatingToProduct", fields: [productId], references: [id])
  rating    Int
  review    String?
  userId    String        @db.ObjectId // Foreign Key to User  
  user      User          @relation("RatingToUser", fields: [userId], references: [id])
  images    ReviewImage[] @relation("RatingToImage")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

model ReviewImage {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  url      String
  RatingId String @db.ObjectId // Foreign Key to Product
  rating   Rating @relation("RatingToImage", fields: [RatingId], references: [id], onDelete: Cascade)
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  Product[] @relation("BrandToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

// save for later and wishlist models

model SaveForLater {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId // Foreign Key to User
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([productId])
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId // Foreign Key to User
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([productId])
}

// cart Model
model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @db.ObjectId // Foreign Key to User
  user      User       @relation("UsertoCart", fields: [userId], references: [id])
  cartItems CartItem[] // Relation to CartItem model
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String  @db.ObjectId // Foreign Key to Cart
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String  @db.ObjectId // Foreign Key to Product
  product   Product @relation("ProductToCart", fields: [productId], references: [id])
  quantity  Int     @default(1)

  @@index([cartId])
  @@index([productId])
}

// order model
model Order {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  orderItems     OrderItem[] // Relation to OrderItem model
  isPaid         Boolean          @default(false)
  deliveryStatus DeliveryStatus[] @relation("deliverystatustoOrder")
  userId         String           @db.ObjectId // Foreign Key to User
  user           User             @relation("UsertoOrder", fields: [userId], references: [id])
  phone          String           @default("")
  address        String           @default("")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model DeliveryStatus {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation("deliverystatustoOrder", fields: [orderId], references: [id])
  status    String // Status of the delivery (e.g., "Order Placed", "Shipped", etc.)
  updatedAt DateTime @updatedAt

  @@index([orderId])
}
